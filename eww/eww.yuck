(defvar music_reveal false)
(defvar power_reveal false)
(defvar reminder_reveal false)

(deflisten song "playerctl -F metadata title")
(deflisten song_artist "playerctl -F metadata artist")
(defpoll current_status :interval "1s" "playerctl position")
(deflisten song_length "playerctl -F metadata mpris:length")
(deflisten song_status "playerctl -F status")
(deflisten cover_art "playerctl -F metadata mpris:artUrl")

(deflisten current_kb_layout "~/scripts/sway_layout")

(deflisten workspace-sway :initial "[]" "~/.config/eww/scripts/workspace sway")
(deflisten which-key-sway :initial "[]" "~/.config/eww/scripts/sway_which_key")
(deflisten mode-sway :initial "{\"change\": \"default\"}" "swaymsg -t subscribe -m '[\"mode\"]'")

(defpoll volume_is_muted :interval "1m"
	 "ponymix is-muted || echo true")

(defpoll volume :interval "1m"
         "ponymix get-volume")

(defpoll time :interval "5s"
         "date '+%A %H:%M'")

(defpoll full_date :interval "5s"
         "date '+:%S, %d %B'")

(defpoll reminders :interval "1m"
         "php ~/scripts/add_reminder.php show")

(defpoll org_clock :interval "30s"
         "~/scripts/emacsclient_exec.sh \"(when (and (fboundp #'org-clocking-p) (org-clocking-p)) (substring-no-properties (org-clock-get-clock-string)))\"")

(defpoll mu4e_modeline_string :interval "30s"
         "~/scripts/emacsclient_exec.sh \"(when (fboundp #'mu4e--modeline-string) (substring-no-properties (mu4e--modeline-string)))\"")

(deflisten swaync-status :initial "{}" "swaync-client -s")

(defwidget reminder_time []
           (eventbox :onhover "${EWW_CMD} update reminder_reveal=true"
                     :onhoverlost "${EWW_CMD} update reminder_reveal=false"
                     (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
                          (label :limit-width 50 :class "org_clock_btn" :text {org_clock != "nil" ? org_clock : ""})
                          (label :class "reminder_time_btn" :text {time})
                          (revealer :transition "slideright"
                                    :reveal reminder_reveal
                                    :duration "350ms"
                                    {full_date}))))

(defwidget control_pop []
           (box :class "control_pop" :orientation "h" :space-evenly "true" :spacing 10 :vexpand "false" :hexpand "false"
                (button :class "lock_btn" :onclick "swaylock -f -c 000000" "")
                (button :class "dnd_btn" :onclick "swaync-client -d"
                        :onmiddleclick "swaync-client -C" {(swaync-status?.dnd ?: false) ? "" : ""})
                (button :class "reboot_btn" :onclick "sudo reboot" "󰜉")
                (button :class "shutdown_btn" :onclick "sudo shutdown +1 eww" "")))

(defpoll weather :initial "{}" :interval "30m" "php ~/scripts/wttr.php")

(defwidget weather_pop []
           (box :visible {(weather?.temp ?: false) != false} :class "weather_pop" :orientation "v" :space-evenly "false" :spacing 20 :vexpand "false" :hexpand "false"
                (box :class "weather_right_now_panel" :orientation "h" :space-evenly "true"
                     (label :class "weather_right_now" :text "${weather?.icon} ${weather?.temp}°C")
                     (label :class "weather_feels_like" :text "Feels like ${weather?.feelsLike}°C")
                     (label :class "weather_humidity" :text " ${weather?.humidity}% 󰖝 ${weather?.windspeed} km/h"))
                (box :class "weather_forecast" :orientation "h" :space-evenly "true"
                     (for h in {weather?.hourly}
                          (box :class "weather_hourly" :orientation "v"
                               (label :class "weather_hourly_time" :text "${h?.time}:00")
                               (label :class "weather_hourly_icon" :text "${h?.icon}")
                               (label :class "weather_hourly_temp" :text "${h?.temp}°C"))))))

(defpoll tasks :initial "{}" :interval "5m" "php ~/scripts/agenda_to_json.php")

(defwidget agenda_task_list [tasks task-label task-class]
           (box :visible {(tasks ?: false) != false} :class "agenda_${task-class}" :orientation "v" :space-evenly "false" :spacing 10 :vexpand "false" :hexpand "false"
                (label :halign "start" :class "agenda_type_label" :text "${task-label}")
                (box :class "agenda_list" :orientation "v" :space-evenly "false" :spacing 5 :vexpand "false" :hexpand "false"
                     (for task in {tasks ?: []}
                          (box :class "agenda_task agenda_task_${task?.type}" :orientation "h" :space-evenly "false" :spacing 5 :vexpand "false" :hexpand "false"
                               (label :class "agenda_task_extra ${task.todo}" :visible {task?.extra != ''} :text {task?.extra})
                               (label :visible {task?.todo != ''} :class "agenda_task_todo_${task.todo}" :text {task?.todo})
                               ;; (label :class "agenda_task_date" :visible {task?.date != ''} :text {task?.date})
                               (label :class "agenda_task_time ${task.todo}" :visible {task?.time != ''} :text {task?.time})
                               (label :class "agenda_task_head ${task.todo}" :limit-width 50 :text {task?.head}))))))

(defwidget agenda_pop []
           (box :class "agenda_pop" :orientation "v" :space-evenly "false" :spacing 30 :vexpand "false" :hexpand "false"
                (agenda_task_list :tasks {tasks?.agenda-day} :task-label "Agenda Day" :task-class "next")
                (agenda_task_list :tasks {tasks?.inbox} :task-label "Inbox" :task-class "inbox")))

(defwidget music_weather_control_widget []
           (box :class "reminder_pop" :orientation "h" :vexpand "true" :hexpand "true"
                (box :orientation "v" :space-evenly "false" :spacing 25 :vexpand "true" :hexpand "true"
                     (box :visible {song != ''} :class "pop_module"
                          (music_pop))
                     (weather_pop)
                     (box :class "pop_module"
                          (control_pop)))))

(defwidget agenda_pomodoro_widget []
           (box :class "reminder_pop" :orientation "h" :space-evenly "true" :spacing 25 :vexpand "true" :hexpand "true"
                (box :orientation "v" :space-evenly "false" :spacing 25 :vexpand "true" :hexpand "true"
                     ;; (box :class "pop_module" :orientation "v" :space-evenly "false" :spacing 20 :hexpand "true"
                     ;;  (label :halign "start" :class "reminder_label" :text "Reminder:")
                     ;;  (input :class "reminder_input" :value "" :onaccept "php ~/scripts/add_reminder.php \"{}\" && ~/.config/eww/scripts/pop reminder")
                     ;;  (box :visible {reminders != ""} :class "separator")
                     ;;  (label :visible {reminders != ""} :width 500 :wrap true :class "reminders" :text reminders))
                     (box :class "pop_module"
                          (calendar :class "calendar" :onclick "php ~/scripts/agenda_to_json.php \"{2}-{1}-{0}\""))
                     (box :class "pop_module" :orientation "v" :space-evenly "false" :spacing 20 :vexpand "true"
                          (agenda_pop)))))

(defwindow music_weather_control :stacking "bottom" :focusable "true" :monitor 0
           :geometry (geometry :x 130 :y 0 :width 400 :height 50 :anchor "right center")
           (music_weather_control_widget))

(defwindow agenda_pomodoro :stacking "bottom" :focusable "true" :monitor 0
           :geometry (geometry :x 130 :y 0 :width 400 :height 50 :anchor "left center")
           (agenda_pomodoro_widget))

(defwidget which_key_widget []
           (box :class "reminder_pop" :orientation "h" :space-evenly "true" :spacing 25 :vexpand "true" :hexpand "true"
                (box :class "pop_module" :orientation "v" :space-evenly "false" :spacing 15 :vexpand "true" :hexpand "true"
                     (for row in {which-key-sway}
                          (box :class "which-key" :orientation "h" :space-evenly "true" :spacing 25 :vexpand "true" :hexpand "true"
                               (for key in {row}
                                    (label :halign "center" :class {key.class} :text "${key.which_key} => ${key.which_command}")))))))

(defwindow which_key :stacking "overlay" :focusable "false" :monitor 0
           :geometry (geometry :x 0 :y 0 :width 400 :height 50 :anchor "center")
           (which_key_widget))

(defwidget music []
           (eventbox :visible {song != ''} :onhover "${EWW_CMD} update music_reveal=true"
                     :onhoverlost "${EWW_CMD} update music_reveal=false"
                     (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
                          (box :class "song_cover_art" :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');")
                          (button :class "song" :onclick "playerctl play-pause"
                                  :onrightclick "playerctl next"
                                  :onmiddleclick "playerctl previous"
                                  (label :limit-width {music_reveal ? 120 : 60} :text "${song_artist} - ${song} "))
                          (revealer :transition "slideright"
                                    :reveal music_reveal
                                    :duration "350ms"
                                    (box :vexpand "false" :hexpand "false" :orientation "h"
                                         (button :class "song_btn_prev" :onclick "playerctl previous" " 󰒮 ")
                                         (button :class "song_btn_play" :onclick "playerctl play-pause" {song_status == "Playing" ? " 󰏤 " : "  "})
                                         (button :class "song_btn_next" :onclick "playerctl next" " 󰒭 "))))))

(defwidget music_pop []
           (box :class "music_pop" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "true"
                (box :class "music_cover_art" :width 150 :height 150 :vexpand "false" :hexpand "false" :style "background-image: url('${cover_art}');" :valign "center")
                ;; Just to occupy enough space
                (image :image-width 150 :image-height 150)
                (box :orientation "v" :valign "center" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "true"
                     (label :halign "center" :class "music" :wrap "true" :text song)
                     (label :halign "center" :class "music_artist" :wrap "true" :text song_artist)
                     (box :orientation "h" :spacing 20 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
                          (button :class "music_btn_prev" :onclick "playerctl previous" "󰒮")
                          (button :class "music_btn_play" :onclick "playerctl play-pause" {song_status == "Playing" ? "󰏤" : ""})
                          (button :class "music_btn_next" :onclick "playerctl next" "󰒭"))
                     (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" :space-evenly "false"
                          (scale :min 0 :active "true" :max {(song_length != '' ? song_length : 0) / 1000000} :value {current_status != '' ? round(current_status, 0) : 0})))))

;; Power
(defwidget power []
           (eventbox :onhover "${EWW_CMD} update power_reveal=true"
                     :onhoverlost "${EWW_CMD} update power_reveal=false"
                     (box :class "module-2" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
                          (button :class "power" "󰗼")
                          (revealer :transition "slideright"
                                    :reveal power_reveal
                                    :duration "350ms"
                                    (box :class "power-options" :vexpand "false" :hexpand "false" :orientation "h"
                                         (button :class "lock-screen" :onclick "swaylock -f -c 000000" "  ")
                                         (button :class "reboot" :onclick "sudo reboot" " 󰜉 ")
                                         (button :class "shutdown" :onclick "sudo shutdown +1 eww" "  "))))))

(defwidget bar-left []
           (box :class "left-side" :space-evenly false :spacing 10 :halign "start"
                (button :visible {mode-sway?.change != "default"} :class "mode ${mode-sway?.change}" :onclick "swaymsg mode default" {mode-sway?.change})
                (workspaces)
                (music)))

(defwidget bar-center []
           (box :class "center-side" :space-evenly false :spacing 10 :halign "start"
                (reminder_time)
                (button :class "dunst-snooze" :onclick "swaync-client -d"
                        :onmiddleclick "swaync-client -C" {(swaync-status?.dnd ?: false) ? "" : ""})))

(defwidget sidestuff []
           (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
                (label :class "mu4e_mail" :text "${mu4e_modeline_string}")
                (label :visible {(weather?.temp ?: false) != false} :class "weather_right_now" :text "${weather?.icon} ${weather?.temp}°C ")
                (label :class "layout" :text "󰌌 ${current_kb_layout} ")
                (eventbox :onscroll "~/scripts/volumenotify {} 5"
                          :onclick "~/scripts/volumenotify !"
                          (label :text "${volume_is_muted == 'true' ? '' : '󰝟'} ${volume}%" :class "volume-label"))
                (systray :class "systray" :orientation "h" :icon-size 16)
                (box :class "separator")
                (power)))

(defwidget bar []
           (centerbox :orientation "h"
                      :vexpand "false"
                      (bar-left)
                      (bar-center)
                      (sidestuff)))

(defwidget workspaces []
	   (box :class "workspaces" :orientation "h" :spacing 10 :space-evenly true :halign "start"
		(for workspace in {workspace-sway}
		     (button :onclick "swaymsg workspace ${workspace.name}"
			     :onrightclick "swaymsg move container to workspace ${workspace.name}"
			     :class {"${workspace.focused ? 'focused' : 'occupied'} ${workspace.urgent ? 'urgent' : ''}"}
			     {replace(workspace.name, workspace.num, "")}))))

(defwindow bar
           :monitor 0
           :windowtype "desktop"
           :geometry (geometry :x "5px"
                               :y "5px"
                               :width "1910px"
                               :height "10px"
                               :anchor "top center")
           :stacking "bottom"
	   :exclusive true
           (bar))
